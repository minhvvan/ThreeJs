{"id":"js/postProcessing.js","dependencies":[{"name":"C:\\Users\\eminh\\Desktop\\Study\\three\\project\\Icosahedron\\package.json","includedInParent":true,"mtime":1633326103247}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PostProcessing = void 0;\nvar PostProcessing = {\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'resolution': {\n      value: null\n    },\n    'pixelSize': {\n      value: 1\n    },\n    'time': {\n      value: 0\n    },\n    'rgbshiftValue': {\n      value: 0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\t\\tvarying highp vec2 vUv;\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t}\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tuniform float pixelSize;\\n\\t\\tuniform vec2 resolution;\\n\\t\\tuniform float time;\\n\\t\\tuniform float rgbshiftValue;\\n\\t\\tvarying highp vec2 vUv;\\n        float hash(vec2 p) { \\n            return fract(\\n                1e4 * \\n                sin(17.0 * p.x + p.y * 0.1) * \\n                (0.1 + abs(sin(p.y * 13.0 + p.x)))\\n                ); \\n            }\\n        \\n\\t\\tvoid main(){\\n            vec2 shift = vec2(0.1, 0.1) * rgbshiftValue;\\n\\n            //make bw\\n            vec4 t = texture2D(tDiffuse, vUv);\\n            vec4 t1 = texture2D(tDiffuse, vUv + shift);\\n            vec4 t2 = texture2D(tDiffuse, vUv - shift);\\n            vec3 color = vec3((t.r + t.b + t.g)/5.);\\n            vec3 color1 = vec3((t1.r + t1.b + t1.g)/5.);\\n            vec3 color2 = vec3((t2.r + t2.b + t2.g)/5.);\\n\\n            color = vec3(color1.r, color.g, color2.b);\\n\\n            //rgb shift\\n\\n\\n            //noise\\n            float val = hash(vUv + time) * 0.1;\\n\\n\\t\\t\\tvec2 dxy = pixelSize / resolution;\\n\\t\\t\\tvec2 coord = dxy * floor( vUv / dxy );\\n\\t\\t\\tgl_FragColor = texture2D(tDiffuse, vUv);\\n\\t\\t\\tgl_FragColor = vec4(color + vec3(val), 1.);\\n\\t\\t}\"\n};\nexports.PostProcessing = PostProcessing;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"js/postProcessing.js","original":{"line":1,"column":1}},{"name":"PostProcessing","generated":{"line":7,"column":4},"source":"js/postProcessing.js","original":{"line":1,"column":7}},{"generated":{"line":7,"column":18},"source":"js/postProcessing.js","original":{"line":1,"column":21}},{"generated":{"line":7,"column":21},"source":"js/postProcessing.js","original":{"line":1,"column":24}},{"name":"uniforms","generated":{"line":8,"column":0},"source":"js/postProcessing.js","original":{"line":3,"column":1}},{"name":"uniforms","generated":{"line":8,"column":2},"source":"js/postProcessing.js","original":{"line":3,"column":1}},{"generated":{"line":8,"column":10},"source":"js/postProcessing.js","original":{"line":3,"column":9}},{"generated":{"line":8,"column":12},"source":"js/postProcessing.js","original":{"line":3,"column":11}},{"generated":{"line":9,"column":0},"source":"js/postProcessing.js","original":{"line":5,"column":2}},{"generated":{"line":9,"column":16},"source":"js/postProcessing.js","original":{"line":5,"column":14}},{"name":"value","generated":{"line":10,"column":0},"source":"js/postProcessing.js","original":{"line":5,"column":16}},{"name":"value","generated":{"line":10,"column":6},"source":"js/postProcessing.js","original":{"line":5,"column":16}},{"generated":{"line":10,"column":11},"source":"js/postProcessing.js","original":{"line":5,"column":21}},{"generated":{"line":10,"column":13},"source":"js/postProcessing.js","original":{"line":5,"column":23}},{"generated":{"line":11,"column":0},"source":"js/postProcessing.js","original":{"line":5,"column":14}},{"generated":{"line":11,"column":5},"source":"js/postProcessing.js","original":{"line":3,"column":11}},{"generated":{"line":12,"column":0},"source":"js/postProcessing.js","original":{"line":6,"column":2}},{"generated":{"line":12,"column":18},"source":"js/postProcessing.js","original":{"line":6,"column":16}},{"name":"value","generated":{"line":13,"column":0},"source":"js/postProcessing.js","original":{"line":6,"column":18}},{"name":"value","generated":{"line":13,"column":6},"source":"js/postProcessing.js","original":{"line":6,"column":18}},{"generated":{"line":13,"column":11},"source":"js/postProcessing.js","original":{"line":6,"column":23}},{"generated":{"line":13,"column":13},"source":"js/postProcessing.js","original":{"line":6,"column":25}},{"generated":{"line":14,"column":0},"source":"js/postProcessing.js","original":{"line":6,"column":16}},{"generated":{"line":14,"column":5},"source":"js/postProcessing.js","original":{"line":3,"column":11}},{"generated":{"line":15,"column":0},"source":"js/postProcessing.js","original":{"line":7,"column":2}},{"generated":{"line":15,"column":17},"source":"js/postProcessing.js","original":{"line":7,"column":15}},{"name":"value","generated":{"line":16,"column":0},"source":"js/postProcessing.js","original":{"line":7,"column":17}},{"name":"value","generated":{"line":16,"column":6},"source":"js/postProcessing.js","original":{"line":7,"column":17}},{"generated":{"line":16,"column":11},"source":"js/postProcessing.js","original":{"line":7,"column":22}},{"generated":{"line":16,"column":13},"source":"js/postProcessing.js","original":{"line":7,"column":24}},{"generated":{"line":17,"column":0},"source":"js/postProcessing.js","original":{"line":7,"column":15}},{"generated":{"line":17,"column":5},"source":"js/postProcessing.js","original":{"line":3,"column":11}},{"generated":{"line":18,"column":0},"source":"js/postProcessing.js","original":{"line":8,"column":2}},{"generated":{"line":18,"column":12},"source":"js/postProcessing.js","original":{"line":8,"column":10}},{"name":"value","generated":{"line":19,"column":0},"source":"js/postProcessing.js","original":{"line":8,"column":12}},{"name":"value","generated":{"line":19,"column":6},"source":"js/postProcessing.js","original":{"line":8,"column":12}},{"generated":{"line":19,"column":11},"source":"js/postProcessing.js","original":{"line":8,"column":17}},{"generated":{"line":19,"column":13},"source":"js/postProcessing.js","original":{"line":8,"column":19}},{"generated":{"line":20,"column":0},"source":"js/postProcessing.js","original":{"line":8,"column":10}},{"generated":{"line":20,"column":5},"source":"js/postProcessing.js","original":{"line":3,"column":11}},{"generated":{"line":21,"column":0},"source":"js/postProcessing.js","original":{"line":9,"column":2}},{"generated":{"line":21,"column":21},"source":"js/postProcessing.js","original":{"line":9,"column":19}},{"name":"value","generated":{"line":22,"column":0},"source":"js/postProcessing.js","original":{"line":9,"column":21}},{"name":"value","generated":{"line":22,"column":6},"source":"js/postProcessing.js","original":{"line":9,"column":21}},{"generated":{"line":22,"column":11},"source":"js/postProcessing.js","original":{"line":9,"column":26}},{"generated":{"line":22,"column":13},"source":"js/postProcessing.js","original":{"line":9,"column":28}},{"generated":{"line":23,"column":0},"source":"js/postProcessing.js","original":{"line":9,"column":19}},{"generated":{"line":24,"column":0},"source":"js/postProcessing.js","original":{"line":3,"column":11}},{"generated":{"line":24,"column":3},"source":"js/postProcessing.js","original":{"line":1,"column":24}},{"name":"vertexShader","generated":{"line":25,"column":0},"source":"js/postProcessing.js","original":{"line":13,"column":1}},{"name":"vertexShader","generated":{"line":25,"column":2},"source":"js/postProcessing.js","original":{"line":13,"column":1}},{"generated":{"line":25,"column":14},"source":"js/postProcessing.js","original":{"line":13,"column":13}},{"generated":{"line":26,"column":0},"source":"js/postProcessing.js","original":{"line":13,"column":15}},{"generated":{"line":27,"column":0},"source":"js/postProcessing.js","original":{"line":13,"column":13}},{"generated":{"line":27,"column":163},"source":"js/postProcessing.js","original":{"line":1,"column":24}},{"name":"fragmentShader","generated":{"line":28,"column":0},"source":"js/postProcessing.js","original":{"line":20,"column":1}},{"name":"fragmentShader","generated":{"line":28,"column":2},"source":"js/postProcessing.js","original":{"line":20,"column":1}},{"generated":{"line":28,"column":16},"source":"js/postProcessing.js","original":{"line":20,"column":15}},{"generated":{"line":29,"column":0},"source":"js/postProcessing.js","original":{"line":20,"column":17}},{"generated":{"line":30,"column":0},"source":"js/postProcessing.js","original":{"line":20,"column":15}},{"generated":{"line":31,"column":0},"source":"js/postProcessing.js","original":{"line":1,"column":24}},{"generated":{"line":31,"column":1},"source":"js/postProcessing.js","original":{"line":1,"column":1}}],"sources":{"js/postProcessing.js":" const PostProcessing = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'resolution': { value: null },\r\n\t\t'pixelSize': { value: 1 },\r\n\t\t'time': { value: 0 },\r\n\t\t'rgbshiftValue': { value: 0 },\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\t\tvarying highp vec2 vUv;\r\n\t\t\tvoid main() {\r\n\t\t\t\tvUv = uv;\r\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tuniform float pixelSize;\r\n\t\tuniform vec2 resolution;\r\n\t\tuniform float time;\r\n\t\tuniform float rgbshiftValue;\r\n\t\tvarying highp vec2 vUv;\r\n        float hash(vec2 p) { \r\n            return fract(\r\n                1e4 * \r\n                sin(17.0 * p.x + p.y * 0.1) * \r\n                (0.1 + abs(sin(p.y * 13.0 + p.x)))\r\n                ); \r\n            }\r\n        \r\n\t\tvoid main(){\r\n            vec2 shift = vec2(0.1, 0.1) * rgbshiftValue;\r\n\r\n            //make bw\r\n            vec4 t = texture2D(tDiffuse, vUv);\r\n            vec4 t1 = texture2D(tDiffuse, vUv + shift);\r\n            vec4 t2 = texture2D(tDiffuse, vUv - shift);\r\n            vec3 color = vec3((t.r + t.b + t.g)/5.);\r\n            vec3 color1 = vec3((t1.r + t1.b + t1.g)/5.);\r\n            vec3 color2 = vec3((t2.r + t2.b + t2.g)/5.);\r\n\r\n            color = vec3(color1.r, color.g, color2.b);\r\n\r\n            //rgb shift\r\n\r\n\r\n            //noise\r\n            float val = hash(vUv + time) * 0.1;\r\n\r\n\t\t\tvec2 dxy = pixelSize / resolution;\r\n\t\t\tvec2 coord = dxy * floor( vUv / dxy );\r\n\t\t\tgl_FragColor = texture2D(tDiffuse, vUv);\r\n\t\t\tgl_FragColor = vec4(color + vec3(val), 1.);\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { PostProcessing };"},"lineCount":null}},"error":null,"hash":"3cb15c97f266c2e0c6a75d624aa54c75","cacheData":{"env":{}}}