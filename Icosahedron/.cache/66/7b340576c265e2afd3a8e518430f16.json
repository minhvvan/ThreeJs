{"id":"js/shader/fragment.glsl","dependencies":[{"name":"C:\\Users\\eminh\\Desktop\\Study\\three\\project\\Icosahedron\\package.json","includedInParent":true,"mtime":1633326103247}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D uLandscape;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 eyeVector;\\nvarying vec3 vBary;\\n\\nfloat PI = 3.141592653589793238;\\n\\nvec2 hash22(vec2 p){\\n\\tp = fract(p * vec2(5.3983, 5.4427));\\n\\tp += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\\n}\\n\\nvoid main()\\t{\\n\\t// vec2 uv = vUv + 0. * sin(vUv.x * 50.);\\n\\tvec3 X = dFdx(vNormal);\\n\\tvec3 Y = dFdy(vNormal);\\n\\tvec3 normal = normalize(cross(X,Y));\\n\\tfloat diffuse = dot(normal, vec3(1.));\\n\\tvec2 rand = hash22(vec2(floor(diffuse * 20.)));\\n\\n\\tfloat fresnel = pow(1. + dot(eyeVector, normal), 2.);\\n\\tvec2 uv = vec2(\\n\\t\\t\\t\\tsign(rand.x - 0.5) * 1. + (rand.x - 0.5) * 0.6 , \\n\\t\\t\\t\\tsign(rand.y - 0.5)*1. + (rand.y - 0.5) * 0.6\\n\\t\\t\\t\\t) * gl_FragCoord.xy/vec2(1000.);\\n\\n\\tvec3 refracted = refract(eyeVector, normal, 1./3.);\\n\\tuv += 0.2 * refracted.xy;\\n\\n\\tvec4 t = texture2D(uLandscape, uv);\\n\\n\\tgl_FragColor = t * (1. - fresnel);\\n\\t// gl_FragColor = vec4(vec3(fresnel), 1.);\\n\\t// gl_FragColor = vec4(diffuse);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1204},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D uLandscape;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 eyeVector;\\nvarying vec3 vBary;\\n\\nfloat PI = 3.141592653589793238;\\n\\nvec2 hash22(vec2 p){\\n\\tp = fract(p * vec2(5.3983, 5.4427));\\n\\tp += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\\n\\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\\n}\\n\\nvoid main()\\t{\\n\\t// vec2 uv = vUv + 0. * sin(vUv.x * 50.);\\n\\tvec3 X = dFdx(vNormal);\\n\\tvec3 Y = dFdy(vNormal);\\n\\tvec3 normal = normalize(cross(X,Y));\\n\\tfloat diffuse = dot(normal, vec3(1.));\\n\\tvec2 rand = hash22(vec2(floor(diffuse * 20.)));\\n\\n\\tfloat fresnel = pow(1. + dot(eyeVector, normal), 2.);\\n\\tvec2 uv = vec2(\\n\\t\\t\\t\\tsign(rand.x - 0.5) * 1. + (rand.x - 0.5) * 0.6 , \\n\\t\\t\\t\\tsign(rand.y - 0.5)*1. + (rand.y - 0.5) * 0.6\\n\\t\\t\\t\\t) * gl_FragCoord.xy/vec2(1000.);\\n\\n\\tvec3 refracted = refract(eyeVector, normal, 1./3.);\\n\\tuv += 0.2 * refracted.xy;\\n\\n\\tvec4 t = texture2D(uLandscape, uv);\\n\\n\\tgl_FragColor = t * (1. - fresnel);\\n\\t// gl_FragColor = vec4(vec3(fresnel), 1.);\\n\\t// gl_FragColor = vec4(diffuse);\\n}\";"},"lineCount":null}},"error":null,"hash":"76bf693fba1a278d0410f49cb232e5be","cacheData":{"env":{}}}